<?xml version="1.0"?>
<project name="flexdock" basedir="." default="build.default">

   <!-- Pull properties that are specific to the working copy environment.
        For instance if your sdk is in a different location that C:\jdk1.5.0_03,
        then specify where it is in this properties file.
   -->
   <property file="workingcopy.properties" />

   <!-- This is the default location of the JDK to compile native DLL/so against.
        If your JDK is in a different location then create a
        workingcopy.properties and set sdk.home to your preferred value there -->
   <property name="sdk.home" value="c:/jdk1.5.0._03"/>
   <property name="sdk.include" value="${sdk.home}/include"/> 

   <!-- build-source properties -->
   <property name="java.src" value="${basedir}/src/java" />
   <property name="lib.dir" value="${basedir}/lib" />
   <property name="java.src.core" value="${java.src}/core" />
   <property name="java.src.demo" value="${java.src}/demo" />
   <property name="java.src.dockbar" value="${java.src}/dockbar" />
   <property name="java.src.drag" value="${java.src}/drag" />
   <property name="java.src.perspective" value="${java.src}/perspective" />
   <property name="java.src.plaf" value="${java.src}/plaf" />
   <property name="java.src.test" value="${java.src}/test" />
   <property name="java.src.view" value="${java.src}/view" />

   <property name="resource.dir" value="${basedir}/resources" />
   <property name="resource.dir.demo" value="${basedir}/resources" />

   <!-- build-output properties -->
   <property name="doc.dir" value="${basedir}/docs" />
   <property name="doc.api.dir" value="${doc.dir}/api" />
   <property name="bin.dir" value="${basedir}/bin" />
   <property name="bin.dir.demo" value="${basedir}/bin-demo" />
   <property name="bin.dir.test" value="${basedir}/bin-test" />
   <property name="dist.dir" value="${basedir}/dist" />
   <property name="version" value="0.3.7" />
   <property name="dist.jar.basename" value="${ant.project.name}-${version}" />

   <!-- sourcepaths -->
   <path id="sourcepath">
      <pathelement location="${java.src.core}" />
      <pathelement location="${java.src.dockbar}" />
      <pathelement location="${java.src.drag}" />
      <pathelement location="${java.src.perspective}" />
      <pathelement location="${java.src.plaf}" />
      <pathelement location="${java.src.view}" />
   </path>

   <!-- classpaths -->
   <path id="javac.classpath">
      <pathelement location="${bin.dir}" />
      <fileset dir="${lib.dir}" includes="skinlf*.jar" />
   </path>
   <path id="javac.classpath.demo">
      <path refid="javac.classpath" />
      <pathelement location="${lib.dir}/jmf.jar" />
   </path>
   <path id="javac.classpath.test">
      <path refid="javac.classpath" />
      <pathelement location="${bin.dir.demo}" />
   </path>
   <path id="rt.classpath.demo">
      <path refid="javac.classpath.demo" />
      <pathelement location="${bin.dir.demo}" />
   </path>
   <path id="rt.classpath.test">
      <path refid="javac.classpath.test" />
      <pathelement location="${bin.dir.test}" />
   </path>

   <!-- build targets -->
   <target name="build.default" depends="clean, resources, compile"
           description="Build the project without compiling the DLL/so"/>
   <target name="build.with.native" depends="clean, resources, compile, compile.native"
           description="Build the project including compiling the DLL/so"/>

   <target name="build.with.dll">
     <fail>

       Use the target build.with.native instead.
     </fail>
   </target>

   <target name="clean" description="Remove all derived files">
      <!-- This way of deleting will not fail if run repeatedly, will delete the dirs,
           and will also fail if we are unable to delete a file or dir too. -->
      <delete includeemptydirs="true" failonerror="true">
         <fileset dir="${basedir}" defaultexcludes="no">
            <include name="bin/**"/>
            <include name="bin-demo/**"/>
            <include name="bin-test/**"/>
            <include name="dist/**"/>
            <include name="docs/api/**"/>
         </fileset>
      </delete>
   </target>

   <target name="init">
      <mkdir dir="${bin.dir}" />
      <mkdir dir="${bin.dir.demo}" />
      <mkdir dir="${bin.dir.test}" />
      <mkdir dir="${dist.dir}" />
      
      <condition property="os.windows">
        <os family="windows"/>
      </condition>
      <condition property="os.unix">
        <os family="unix"/>
      </condition>
   </target>

   <target name="resources" depends="init"
           description="Copy non-compiled files from resource dirs to binXXX dirs">
      <copy todir="${bin.dir}">
         <fileset dir="${resource.dir}/core" excludes="org/flexdock/util/dev-props.properties" />
         <fileset dir="${resource.dir}/plaf" />
      </copy>
      <copy todir="${bin.dir.demo}">
         <fileset dir="${resource.dir}/demo" />
      </copy>
   </target>

   <target name="compile" depends="init, resources"
           description="Compile java sources for the framework, demos, and tests">
      <javac classpathref="javac.classpath" destdir="${bin.dir}">
         <src path="${java.src.core}" />
         <!-- the next 3 are interdependent -->
         <src path="${java.src.view}"/>
         <src path="${java.src.plaf}"/>
         <src path="${java.src.dockbar}"/>
         <src path="${java.src.drag}"/>
         <src path="${java.src.perspective}"/>
      </javac>
      <javac classpathref="javac.classpath.demo" srcdir="${java.src.demo}" destdir="${bin.dir.demo}" />
      <javac classpathref="javac.classpath.test" srcdir="${java.src.test}" destdir="${bin.dir.test}" />
   </target>


   <target name="compile.native" depends="compile.dll,compile.unix.lib"
           description="Compile the native code for the current platform"/>

   <target name="native.init" depends="init">
      <available file="${sdk.include}" type="dir" property="sdk.include.available"/>
      <fail unless="sdk.include.available">

         ERROR:
         The sdk.include property is set to: ${sdk.include}

         This directory does not exist but is required in order to compile
         native libraries.  To set this property for your environment create
         a workingcopy.properties (copying from workingcopy.properties-sample)
         and edit the sdk.home property to reference your JDK's root directory,
         or if your JDK's include directory isn't located under the sdk.home dir
         in the dir named include, then set sdk.include to reference the include
         directory containing the jni.h file.
      </fail>

      <!-- The following crazy logic builds a gcc -I arg for each dir in and under 
           the sdk.include path.  This is avoid having to hard code OS/os-family specific
           include subdir names.  For example, the only difference betwee linux and freebsd
           compiles is the name of the include subdir. -->
      <path id="sdk.include.dirset">
        <dirset dir="${sdk.include}"/>
      </path>
      <pathconvert property="sdk.include.gcc.args.temp"
                   refid="sdk.include.dirset"
                   pathsep='" "-I'/>
      <property name="sdk.include.gcc.args" value='"-I${sdk.include.gcc.args.temp}"'/>
   </target>


   <target name="compile.dll.init" depends="native.init" if="os.windows">
      <available file="${mingw.home}" type="dir" property="mingw.home.available"/>
      <fail unless="mingw.home.available">

         ERROR:
         The mingw.home property is set to: ${mingw.home}

         This directory does not exist but is required in order to compile
         native libraries.  To set this property for your environment create
         a workingcopy.properties (copying from workingcopy.properties-sample)
         and edit the mingw.home property to reference the location where you
         installed MinGW 3.1.0 (see http://www.mingw.org for download).
      </fail>
      <property environment="env"/>
      <presetdef name="gcc.mingw">
         <exec executable="${mingw.home}/bin/gcc" failonerror="true">
            <env key="Path" value="${mingw.home}/bin${path.separator}${env.Path}"/>
         </exec>
      </presetdef>
   </target>

   <!--
       This target compiles the RubberBand.dll.  It will only run if on Windows.
       It requires the version of gcc available from http://www.mingw.org/ to build.  It will
       not build with the version of gcc installed by cygwin with mingw support.
   -->
   <target name="compile.dll" depends="compile.dll.init" if="os.windows"
           description="Compile the DLL if you're on Windows">

      <property name="c.dir" value="${basedir}\src\c\core\org\flexdock\docking\drag\outline\win32" />
      <property name="dll.dir" value="${basedir}\bin\org\flexdock\docking\drag\outline\win32" />

      <!-- Cleanup existing DLL or ensure the dir exists -->
      <delete file="${dll.dir}/RubberBand.dll" failonerror="false" />
      <mkdir dir="${dll.dir}"/>

      <!-- Create the object file -->
      <gcc.mingw>
         <arg value='-c'/>
         <arg value='-o'/>
         <arg value='${java.io.tmpdir}\RubberBand.o' />
         <arg value='${c.dir}\RubberBand.c' />
         <arg line='${sdk.include.gcc.args}'/> <!-- potentially multiple include dirs -->
      </gcc.mingw>
      <!-- Link the shared resource -->
      <gcc.mingw>
         <arg value="-mwindows" />
         <arg value="-shared" />
         <arg value="-o" />
         <arg value="${dll.dir}\RubberBand.dll" />
         <arg value="${java.io.tmpdir}\RubberBand.o" />
         <arg value="${c.dir}\RubberBand.def" />
      </gcc.mingw>
   </target>

   <!--
       This target compiles the libRubberBand.so.  It will only run if on a UNIX os.
       It requires that gcc and X11 includes and libraries  installed.
   -->
   <target name="compile.unix.lib" depends="native.init" if="os.unix"
           description="Compile the shared library if you're on a UNIX of some sort">
     <property name="c.dir" value="${basedir}/src/c/core/org/flexdock/docking/drag/outline/xlib"/>
     <property name="so.dir" value="${basedir}/bin/org/flexdock/docking/drag/outline/xlib"/>

     <!-- Cleanup existing .so or ensure the dir exists -->
     <delete file="${so.dir}/libRubberBand.so" failonerror="false"/>
     <mkdir dir="${so.dir}"/>

     <exec executable="gcc" failonerror="true">
       <arg value="-lX11"/>
       <arg value="-L/usr/X11R6/lib"/>
       <arg value="-I/usr/X11R6/include"/>
       <arg value="-o"/>
       <arg value="${so.dir}/libRubberBand.so"/>
       <arg value="-shared"/>
       <arg value="${c.dir}/RubberBand.c"/>
       <arg line='${sdk.include.gcc.args}'/> <!-- potentially multiple include dirs -->
     </exec>
   </target>


   <!-- builds the javadoc excluding demos and tests -->
   <target name="javadoc" depends="init" unless="javadoc.skip"
           description="Generate javadoc for the framework">
      <javadoc destdir="${doc.api.dir}" sourcepathref="sourcepath" classpathref="javac.classpath">
         <packageset dir="${java.src.core}" />
         <packageset dir="${java.src.dockbar}" />
         <packageset dir="${java.src.drag}" />
         <packageset dir="${java.src.perspective}" />
         <packageset dir="${java.src.view}" />
         <link href="http://java.sun.com/j2se/1.4.2/docs/api/" />
         <!-- add links to the j2se 1.4 docs -->
      </javadoc>
   </target>

   <target name="dist" depends="dist.src,dist.bin"
           description="Builds the binary and source distributions"/>

   <!-- creates a source distribution -->
   <target name="dist.src" depends="init"
           description="Produce a zip containing all sources necessary to build the project">
      <patternset id="srcfiles.pattern">
      </patternset>
      <zip destfile="${dist.dir}/${dist.jar.basename}-src.zip">
         <fileset dir="${basedir}">
            <exclude name="bin/**"/>
            <exclude name="bin-demo/**"/>
            <exclude name="bin-test/**"/>
            <exclude name="dist/**"/>
            <exclude name="docs/api/**"/>
            <exclude name="workingcopy.properties"/>
         </fileset>
      </zip>
      <!-- TODO: ensure that ZIP has DOS EOLs if not built on Windows -->
      <!-- TODO: build *NIX tar.gz -->
   </target>

   <target name="dist.bin" depends="init, resources, compile, javadoc"
           description="Produce a zip containing the built library, javadocs, and license">
      <!-- TODO: build a separate  pure-java version that has no native code in it -->
      <jar jarfile="${dist.dir}/${dist.jar.basename}.jar" basedir="${bin.dir}" />
      <zip destfile="${dist.dir}/${dist.jar.basename}.zip">
         <fileset dir="${basedir}">
            <include name="LICENSE.txt"/>
            <include name="docs/**" />
         </fileset>
         <fileset dir="${dist.dir}" includes="${dist.jar.basename}.jar" />
      </zip>
      <!-- TODO: ensure that ZIP has DOS EOLs if not built on Windows -->
      <!-- TODO: build *NIX tar.gz -->
   </target>


   <!-- define a java task preset to run demos forked from the demo bin dir with the right stuff in the classpath -->
   <presetdef name="java.demo">
      <java fork="yes" dir="${bin.dir.demo}" classpathref="rt.classpath.demo" />
   </presetdef>

   <!-- Targets to run demos -->

   <target name="demo.perspectives" depends="resources,compile" description="Run org.flexdock.demos.perspective.PerspectivesDemo">
      <java.demo classname="org.flexdock.demos.perspective.PerspectivesDemo" />
   </target>

   <target name="demo.xmlperspectives" depends="resources,compile" description="Run org.flexdock.demos.perspective.XMLPerspectivesDemo">
      <java.demo classname="org.flexdock.demos.perspective.XMLPerspectivesDemo" />
   </target>

   <target name="demo.adapter" depends="resources,compile" description="Run org.flexdock.demos.raw.adapter.AdapterDemo">
      <java.demo classname="org.flexdock.demos.raw.adapter.AdapterDemo" />
   </target>

   <target name="demo.border" depends="resources,compile" description="Run org.flexdock.demos.raw.border.BorderDemo">
      <java.demo classname="org.flexdock.demos.raw.border.BorderDemo" />
   </target>

   <target name="demo.compound" depends="resources,compile" description="Run org.flexdock.demos.raw.CompoundDemo">
      <java.demo classname="org.flexdock.demos.raw.CompoundDemo" />
   </target>

   <target name="demo.elegant" depends="resources,compile" description="Run org.flexdock.demos.raw.elegant.ElegantDemo">
      <java.demo classname="org.flexdock.demos.raw.elegant.ElegantDemo" />
   </target>

   <target name="demo.jmf" depends="resources,compile" description="Run org.flexdock.demos.raw.jmf.JMFDemo">
      <java.demo classname="org.flexdock.demos.raw.jmf.JMFDemo" />
   </target>

   <target name="demo.simple" depends="resources,compile" description="Run org.flexdock.demos.raw.SimpleDemo">
      <java.demo classname="org.flexdock.demos.raw.SimpleDemo" />
   </target>

   <target name="demo.splitpane" depends="resources,compile" description="Run org.flexdock.demos.raw.SplitPaneDemo">
      <java.demo classname="org.flexdock.demos.raw.SplitPaneDemo" />
   </target>

   <target name="demo.tabbedpane" depends="resources,compile" description="Run org.flexdock.demos.raw.TabbedPaneDemo">
      <java.demo classname="org.flexdock.demos.raw.TabbedPaneDemo" />
   </target>

   <target name="demo.view" depends="resources,compile" description="Run org.flexdock.demos.view.ViewDemo">
      <java.demo classname="org.flexdock.demos.view.ViewDemo" />
   </target>


   <!-- define a java task preset to run tests forked from the test bin dir with the right stuff in the classpath -->
   <presetdef name="java.test">
      <java fork="yes" dir="${bin.dir.test}" classpathref="rt.classpath.test" />
   </presetdef>

   <!-- Targets to run tests -->

   <target name="test.rubberband" depends="resources,compile" description="Run org.flexdock.test.drag.RubberBandTest">
      <java.test classname="org.flexdock.test.drag.RubberBandTest" />
   </target>

   <target name="test.basicdockbar" depends="resources,compile" description="Run org.flexdock.test.dockbar.BasicDockbarTest">
      <java.test classname="org.flexdock.test.dockbar.BasicDockbarTest" />
   </target>

   <target name="test.complexdockbar" depends="resources,compile" description="Run org.flexdock.test.dockbar.ComplexDockbarTest">
      <java.test classname="org.flexdock.test.dockbar.ComplexDockbarTest" />
   </target>

   <target name="test.viewrestoration" depends="resources,compile" description="Run org.flexdock.test.perspective.ViewRestorationTest">
      <java.test classname="org.flexdock.test.perspective.ViewRestorationTest" />
   </target>

   <target name="test.sibling" depends="resources,compile" description="Run org.flexdock.test.SiblingTest">
      <java.test classname="org.flexdock.test.SiblingTest" />
   </target>

   <target name="test.viewframe" depends="resources,compile" description="Run org.flexdock.test.view.ViewFrameTest">
      <java.test classname="org.flexdock.test.view.ViewFrameTest" />
   </target>

   <target name="test.view" depends="resources,compile" description="Run org.flexdock.test.view.ViewTest">
      <java.test classname="org.flexdock.test.view.ViewTest" />
   </target>

</project>
